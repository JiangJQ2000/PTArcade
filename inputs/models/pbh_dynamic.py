from enterprise.signals.parameter import function
import enterprise.signals.parameter as parameter
import scipy.constants as scon
import numpy as np

name = 'pbh_dynamic' # name of the model
mod_sel = True # set to True if you want to compare the model to the SMBHB signal
smbhb = True # set to True if you want to overlay the new-physics signal to the SMBHB signal
corr = False # set to True if you want to include spatial correlations in the analysis 
parameters ={
    "log10_A_dyn_dm" : parameter.Uniform(-20, -12)('log10_A_dyn_dm'),
    "t0_on_T" : parameter.Uniform(0, 1)('t0_on_T')
}
group = ['log10_A_dyn_dm', 't0_on_T']

@function
def signal(toas, log10_A_dyn_dm, t0_on_T):
    """
    Function that calculates the dynamic pulsar term signal generated by
    DM substructure
    :param toas: Time-of-arrival measurements [s]
    :param log10_A: log10 of GW strain
    :param log10_f: log10 of GW frequency
    :param phase_p: The Pulsar-term phase of the GW
    :return: the waveform as induced timing residuals (seconds)
    """
    
    # convert 
    A = 10 ** log10_A_dyn_dm

    # shift the TOAs so that they start at t = 0 (s)
    toas_ref = toas - np.amin(toas)

    # observation time (s)
    T = np.amax(toas_ref)

    # get t_0 (s)
    t_0 = t0_on_T * T

    # return timing residual = A*(t-t_0)*step(t-t_0) (unit = s)
    return A * (toas_ref - t_0) * np.heaviside(toas_ref - t_0, 0)