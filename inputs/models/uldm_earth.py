from enterprise.signals.parameter import function
import enterprise.signals.parameter as parameter
import scipy.constants as scon
import numpy as np
import src.models_aux as aux

name = 'uldm_earth' # name of the model

mod_sel = True # set to True if you want to compare the model to the SMBHB signal

smbhb = True # set to True if you want to overlay the new-physics signal to the SMBHB signal
corr = False # set to True if you want to include spatial correlations in the analysis 

parameters ={
    "log10_A_dm" : parameter.Uniform(-17, -10)('log10_A_dm'),
    "log10_mass_dm" : parameter.Uniform(-24, -19)('log10_mass_dm'),
    "gamma" : parameter.Uniform(0, 2 * np.pi)('gamma_e'),
    "phi_hat_sq" : aux.Gamma(1,0,1)('phi_hat_e_sq'),
    "y" : parameter.Constant(1)('y_e')
}

group = ['log10_A_dm', 'log10_mass_dm']

@function
def signal(toas, log10_A_dm, log10_mass_dm, gamma, phi_hat_sq, y):
    """
    Function that calculates the pulsar term signal generated by
    ultralight dark matter 
    :param toas: Time-of-arrival measurements [s]
    :param log10_A: log10 of GW strain
    :param log10_f: log10 of GW frequency
    :param phase_p: The Pulsar-term phase of the GW
    :return: the waveform as induced timing residuals (seconds)
    """
    
    # convert 
    A = 10 ** log10_A_dm

    f = 2*np.pi * scon.physical_constants['electron volt-hertz relationship'][0] * 10 ** log10_mass_dm

    # return timing residual in seconds
    return - y * A * np.sqrt(phi_hat_sq) / f * np.sin(f * toas + gamma)
